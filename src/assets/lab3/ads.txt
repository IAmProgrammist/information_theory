1. Таблица - множество элементов одинаковой организации, имеющих вид <K, V>, где K - ключ, а V - тело
Ключи уникальны.

Инициализация, включение, исключение, чтение, редактирование, удаление таблицы, проверка на пустоту.

2. Линейная и нелинейная. Линейная делится на упорядоченную и неупорядоченную, те в свою очередь на реализацию на массиве, ОЛС. ДЛС. Нелинейная делится на реализации на графе, бинарном дереве, n-арном графе и хеш таблица. По методичке - упор, неупор и хэш таблицы.

3. Зависит от реализации на упоряд. Рассмотрим для СЛС. Включение - O(N), исключение - O(1)
На неупор: Включение - O(1), исключ - O(1)

4. Возможно несколько случаев: 
Вершина не имеет сыновей, тогда просто удаляем его.
Если есть один сын, то сын заменяет удаляемую вершину.
Если есть два сына, то нужно найти такого пра...сына, который будет удовлетворять одному из двух условий. Такой элемент есть всегда, это либо самый правый элемент левого поддерева, или самый левый элемент правого поддерева. Если находим такой элемент, то обмениваем значения с удаляемой вершиной и удаляем найденную вершину.

5. Хэш таблитца - это таблица позиция элемента ai в которой определяется при помощи некоторой хэш-функции H. Хэш-функция принимает ключ ki, обрабатывает его и возвращает значение, которое будет использоваться в таблице. Иногда может случиться так, что H может возвращать одинаковые результаты для разных ключей, этот случай называется коллизией.

6. Существует несколько способов разрешения коллизий: 

метод цепочек
Элементы таблицы - списки, которые содержат оригинальные элементы <K, V>

Открытая адресация
Элементы массива содержатся в массиве, при использовании используются две хеширующие функции H1 и H2. ДОполнительно в поле элемента хаписывается флаг - был ли в ней элемент, находится ли элемент в текущий момент или ячейка пуста. 

При включении сначала вычисляется Ai = H1(Ki). Если элемент по Ai в таблице пустой, то включаем его, иначе перевычисляем его при помощи H2 Ai = H2(Ai). Так выполняем до тех пор, пока не найдём пустой элемент. H2 - функция рехеширования - имеет вид (C1 * Ai + C2) mod n. Если C2 = 1, то это линейное опробование, иначе - двойное хеширование. 

При исключении вычисляем Ai пока не дойдём до элемента, который имеет флаг был занят или свободен. После включаем его и обновляем флаг.

7. Алгоритм включения неконечен. Так, если вся таблица заполнена при линейном опробовании, то мы будем бесконечно блуждать по таблице - то есть получим зацикливание. Обнаружить зацикливание можно при помощи счётчика итераций при включении, если он больше размера таблицы, то включение невозможно. Также можно запоминать ключ первого найденного элемента.

8. Зависит от реализации

Инициализация - O(1)

Включение элемента - в лучшем - O(1), в худшем - O(n) в методе прямой адресации, если таблица заполнена, где n - размер таблицы. В методе цепочек n неограничен, так как таблица может выродиться в связный список.

Исключение - в лучшем - O(1), в худшем - O(n) в методе прямо адресации, n неогр. в методе цепочек.

Чтение/изменение - (далее сразу будем рассматривать худший случай, так как и так понятно, что лучший - O(1)). O(n) в прямой аресации, n не ограничен в методе цепочек.

Проверка на пустоту - O(1), если добавим счётчик элементов

Удаление - O(1) в прямой адресации, O(mn), где m - ширина цепочки, n - кол-во элементов таблицы.